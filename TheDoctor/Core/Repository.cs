//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

namespace LibraryBusinessLogic
{
	public class Repository
	{		
		public static string ConnectionString
		{
			get;
			set;
		}
		
		public static List<TEntity> Select<TEntity>(string sp_name, List<SqlParameter> parameters) where TEntity : new()
		{
			List<TEntity> result = new List<TEntity>();
			
			using (SqlConnection connection = new SqlConnection(ConnectionString))
			{
				SqlCommand command;
				CreateCommand(sp_name, parameters, connection, out command);			
					
				connection.Open();
				
				using (SqlDataReader reader = command.ExecuteReader())
				{				
					while (reader.Read())
					{
						TEntity entity = ReadEntity<TEntity>(reader);
						result.Add(entity);
					}				
				}			
			}
			
			return result;
		}
		
		public static void NoQuery(string sp_name, List<SqlParameter> parameters)
		{
			using (SqlConnection connection = new SqlConnection(ConnectionString))
			{
				SqlCommand command;
				CreateCommand(sp_name, parameters, connection, out command);
				
				connection.Open();
				
				command.ExecuteNonQuery();
				
				connection.Close();
			}
		}
		
		public static TValue Scalar<TValue>(string sp_name, List<SqlParameter> parameters)
		{
			using (SqlConnection connection = new SqlConnection(ConnectionString))
			{
				SqlCommand command;
				CreateCommand(sp_name, parameters, connection, out command);
				
				connection.Open();
				
				TValue value = (TValue)command.ExecuteScalar();
				
				return value;
			}
		}
		
		private static void AddSqlParameters(SqlCommand command, List<SqlParameter> parameters)
		{
			foreach (SqlParameter parameter in parameters)
			{
				command.Parameters.Add(parameter);
			}
		}
		
		private static void CreateCommand(string sp_name, List<SqlParameter> parameters, SqlConnection connection, out SqlCommand command)
		{
			command = new SqlCommand(sp_name, connection);
			command.CommandType = System.Data.CommandType.StoredProcedure;
			if(parameters != null)
			{
				AddSqlParameters(command, parameters);
			}
		}
		
		private static TEntity ReadEntity<TEntity>(SqlDataReader reader) where TEntity : new()
		{
			///
			/// To do : Необходимо использовать инициализацию типов по которой определяется какие именно поля с какими типами необходимо устанавливать
			///
			
			TEntity entity = new TEntity();
			Type type = typeof(TEntity);
			
			foreach(PropertyInfo property in type.GetProperties())
			{
				int index = reader.GetOrdinal(property.Name);				
				if(index >= 0)
				{
					Type valueType = reader.GetFieldType(index);
					
					if(valueType.Equals(typeof(Guid)))
					{
						property.SetValue(entity, reader.GetGuid(index), null);
					}
					else if(valueType.Equals(typeof(string)))
					{
						property.SetValue(entity, reader.GetString(index), null);
					}
					else if(valueType.Equals(typeof(bool)))
					{
						property.SetValue(entity, reader.GetBoolean(index), null);
					}
                    else if (valueType.Equals(typeof(DateTime)))
                    {
                        if (!reader.IsDBNull(index))
                        {
                            property.SetValue(entity, reader.GetSqlDateTime(index).Value, null);
                        }
                    }
					 
				}
			}
			
			return entity;
		}
	}
}
